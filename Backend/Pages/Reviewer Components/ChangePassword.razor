@page "/ChangePasswordReviewer/{ReviewerId}"

@using Domain.Entities;
@using Backend.Authentication;
@using Backend.Services;

@attribute [Authorize(Roles = "Admin, Employee")]

@inject NavigationManager _navigationManager;
@inject ReviewerService _reviewerService;
@inject IJSRuntime js;

@attribute [Authorize(Roles = "Admin")]

<h3>Change Password</h3>

@if(reviewer == null)
{
    <div>Loading........</div>
}
else
{
    <EditForm Model="@reviewer" OnValidSubmit="@UpdateUserAsync">
        <div class="userFields">
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="@model.Password"></InputText>
            </div>
            <div class="mb-3">
                <label for="passwordRepeat" class="form-label">Repeat Password</label>
                <InputText id="passwordRepeat" type="password" class="form-control" @bind-Value="@model.RepeatPassword"></InputText>
            </div>
        </div>
         <button type="submit">
            <span class="bi bi-prescription"></span>
                Change Password
         </button>
         <button type="button" @onclick="Close">
           <span class="oi oi-media-skip-backward"></span>
              Close
         </button>
    </EditForm>
}

@code {
    [Parameter]
    public string ReviewerId { get; set; }

    public Reviewer reviewer { get; set; }
    private Encryption encryption { get; set; } = new Encryption();
    public class Model
    {
        public string Password;
        public string RepeatPassword;
    };
    private Model model = new Model();
    protected override async Task OnInitializedAsync()
    {
        reviewer = await _reviewerService.GetReviewerAsync(int.Parse(ReviewerId));
        reviewer.Username = string.Empty;
    }
    private async Task UpdateUserAsync()
    {
        if (!model.Password.Equals(model.RepeatPassword))
        {
            await js.InvokeVoidAsync("alert","Both fields do not match!");
            return;
        }
        string temp = encryption.EncodePasswordToBase64(model.Password);
        reviewer.Password = temp;
        await _reviewerService.UpdateReviewerAsync(reviewer);
        Close();
    }
    private void Close()
    {
        _navigationManager.NavigateTo("/reviewers");
    }
}
