@page "/login"

@using Frontend.Services;
@using Domain.Entities;
@using Frontend.Authentication;


@inject ReviewerService _reviewerService;
@inject IJSRuntime js;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager _navigationManager;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.Username" class="form-control" placeholder="User Name...."/>
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password...."/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
    IEnumerable<Reviewer> reviewers { get; set; }
    private Model model = new Model();
    private Encryption encryption = new Encryption();

    protected override async Task OnInitializedAsync()
    {
        reviewers = await _reviewerService.GetReviewers();
    }

    private async Task Authenticate()
    {   
        var userAcount = reviewers.First(x => x.Username.Equals(model.Username));
        string password = encryption.DecodeFrom64(userAcount.Password);
        if(userAcount is null || password != model.Password)
        {
            await js.InvokeVoidAsync("alert","Invalid Username or password");
            return;
        }
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession {
                Username = userAcount.Username,
                Role = "Reviewer"
        });
        _navigationManager.NavigateTo("/",true);
    }
}
